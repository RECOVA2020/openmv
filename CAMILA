import sensor, image, time, math,os,nn


# Color Tracking Thresholds (Grayscale Min, Grayscale Max)

min_rgb = 200
max_rgb = 255

min1=1
max2=255

threshold_list = [(min_rgb, max_rgb,min1,max2)]

# Set the target temp range here


min_temp_in_celsius =15
max_temp_in_celsius = 40

pixel_thresh=20
area_thresh=20 #DISTACIA

print("Resetting Lepton...")
# These settings are applied on reset
sensor.reset()
sensor.ioctl(sensor.IOCTL_LEPTON_SET_MEASUREMENT_MODE, True)
sensor.ioctl(sensor.IOCTL_LEPTON_SET_MEASUREMENT_RANGE, min_temp_in_celsius, max_temp_in_celsius)



print("Lepton Res (%dx%d)" % (sensor.ioctl(sensor.IOCTL_LEPTON_GET_WIDTH),sensor.ioctl(sensor.IOCTL_LEPTON_GET_HEIGHT)))
print("Radiometry Available: " + ("Yes" if sensor.ioctl(sensor.IOCTL_LEPTON_GET_RADIOMETRY) else "No"))





sensor.set_pixformat(sensor.GRAYSCALE)
sensor.set_framesize(sensor.QQQVGA)
sensor.skip_frames(time=5000)
clock = time.clock()

# Only blobs that with more pixels than "pixel_threshold" and more area than "area_threshold" are
# returned by "find_blobs" below. Change "pixels_threshold" and "area_threshold" if you change the
# camera resolution. "merge=True" merges all overlapping blobs in the image.

def map_g_to_temp(g):
    return ((g * (max_temp_in_celsius - min_temp_in_celsius)) / 255.0) + min_temp_in_celsius


def get_temperatures(img):
    temperatures = []
    for blob in img.find_blobs(threshold_list, pixel_threshold=pixel_thresh, area_threshold=area_thresh, margin=50, merge=True):

        stats = img.get_statistics(thresholds=threshold_list, roi=blob.rect()) #get statistics for each blob where the blob is the roi.
        temperatures.append(map_g_to_temp(stats.mean()))

    return temperatures


def add_details(img):
    for blob in img.find_blobs(threshold_list, pixel_threshold=pixel_thresh, area_threshold=area_thresh, margin=50, merge=True):

        img.draw_rectangle(blob.rect()) #draws a rectangle (x, y, w, h) around blob for bounding box
        stats = img.get_statistics(thresholds=threshold_list, roi=blob.rect()) #get statistics for each blob where the blob is the roi.
        img.draw_string(blob.x(), blob.y() - 10, "%.2f C" % map_g_to_temp(stats.mean()), mono_space=False)

    return img


#net = nn.load('/person.network')



while(True):
    clock.tick()
    img = sensor.snapshot()
    blob_stats = []
    blobs = img.find_blobs(threshold_list, pixels_threshold=pixel_thresh, area_threshold=area_thresh,margin=60, merge=True)

#out = net.forward(img, softmax=True)
#if out.index(max(out)) == 0:



# Collect stats into a list of tuples
    for blob in blobs:
        blob_stats.append((blob.x()==5, blob.y()-5, map_g_to_temp(img.get_statistics(thresholds=threshold_list,roi=blob.rect()).mean())))
    img.to_rainbow(color_palette=sensor.PALETTE_IRONBOW) # color it


# Draw stuff on the colored image
    for blob in blobs:
        img.draw_rectangle(blob.rect(),color=30)
        img.draw_cross(blob.cx(), blob.cy(),color=65)
    for blob_stat in blob_stats:
        img.draw_string(blob_stat[0] --40, blob_stat[1] --10, "%.2f C" % blob_stat[2],scale=1.8,color=30, mono_space=False)

#print("FPS %f - Lepton Temp: %f C" % (clock.fps(), sensor.ioctl(sensor.IOCTL_LEPTON_GET_FPA_TEMPERATURE)))
#print("person detected")
